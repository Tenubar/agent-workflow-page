<script>

document.addEventListener("DOMContentLoaded", () => {

    const userId = id;
    const userAgents = agentCount;
    let agentFlag = false;
    getAgents();


    // ADMIN PANEL
    // Create new Agent
    const trigger_new_agent = document.getElementById('button-new-agent');
    trigger_new_agent.addEventListener('click', () => {
        
        if(agentFlag){
            return;
        }
        agentFlag = true;

        // Form container
        const formContainer = document.createElement('div');
        formContainer.style.position = 'fixed';
        formContainer.style.top = '10%';
        formContainer.style.left = '50%';
        formContainer.style.width = "40vw";
        formContainer.style.transform = "translateX(-50%)";
        formContainer.style.backgroundColor = 'white';
        formContainer.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';
        formContainer.style.padding = '20px';
        formContainer.style.zIndex = '1000';
        formContainer.style.borderRadius = 'var(--border-radius-2)';

        // Close button
        const closeButton = document.createElement('button');
        closeButton.textContent = "\u00D7";
        closeButton.style.float = 'right';
        closeButton.style.marginBottom = '10px';
        closeButton.style.background = "transparent";
        closeButton.style.fontSize = "25px";
        closeButton.style.color = "var(--color-info-dark)";
        closeButton.style.cursor = "pointer";
        closeButton.addEventListener('click', () => {
            document.body.removeChild(formContainer);
            agentFlag = false;
        });
        formContainer.appendChild(closeButton);

        // Form
        const form = document.createElement('form');
        form.addEventListener('submit', async (event) => {
            event.preventDefault();
            await createAgent();
        });
        form.style.display = "grid";
        form.style.rowGap = "0.6rem";

        // Create a New Agent Container
        const divContainer = document.createElement('div');
        divContainer.classList.add('div-agent-container');
        divContainer.style.display = "grid";
        divContainer.style.rowGap = "0.6rem";

        form.appendChild(divContainer);

        // Agent title label and input
        const titleLabel = document.createElement('label');
        titleLabel.setAttribute('for', 'agent-title');
        titleLabel.textContent = 'Agent Title: ';
        divContainer.appendChild(titleLabel);

        const titleInput = document.createElement('input');
        titleInput.setAttribute('type', 'text');
        titleInput.setAttribute('id', 'agent-title');
        titleInput.setAttribute('name', 'title');
        titleInput.style.display = 'block';
        titleInput.style.marginBottom = '10px';
        titleInput.style.background = "var(--color-background)";
        titleInput.style.borderRadius = "var(--border-radius-1)";
        titleInput.style.height = "32px";
        titleInput.style.width = "100%";
        titleInput.style.padding = "8px";
        titleInput.style.border = "solid 2px var(--color-primary)";
        divContainer.appendChild(titleInput);   


        // Agent background label and textarea
        const backgroundLabel = document.createElement('label');
        backgroundLabel.setAttribute('for', 'agent-background');
        backgroundLabel.textContent = 'Agent Background: ';
        divContainer.appendChild(backgroundLabel);

        const backgroundTextarea = document.createElement('textarea');
        backgroundTextarea.setAttribute('id', 'agent-background');
        backgroundTextarea.setAttribute('name', 'background');
        backgroundTextarea.style.display = 'block';
        backgroundTextarea.style.marginBottom = '10px';
        backgroundTextarea.style.background = "var(--color-background)";
        backgroundTextarea.style.borderRadius = "var(--border-radius-1)";
        backgroundTextarea.style.height = "250px";
        backgroundTextarea.style.width = "100%";
        backgroundTextarea.style.padding = "8px";
        backgroundTextarea.style.border = "2px solid var(--color-primary)";
        backgroundTextarea.style.resize = "none";
        backgroundTextarea.style.overflow = "auto";
        divContainer.appendChild(backgroundTextarea);

        // Submit button
        const submitButton = document.createElement('button');
        submitButton.setAttribute('type', 'submit');
        submitButton.textContent = 'Create';
        submitButton.style.position = 'relative';
        submitButton.style.left = "50%";
        submitButton.style.transform = "translateX(-50%)";
        submitButton.style.display = "flex";
        submitButton.style.justifyContent = "center";
        submitButton.style.background = "var(--color-primary)";
        submitButton.style.padding = "8px 18px"
        submitButton.style.width = "72px";
        submitButton.style.textAlign = "center";
        submitButton.style.fontSize = "14px";
        submitButton.style.borderRadius = "var(--border-radius-1)";
        submitButton.style.color = "var(--color-light)";
        submitButton.style.cursor = "pointer";
        divContainer.appendChild(submitButton);


        formContainer.appendChild(form);
        document.body.appendChild(formContainer);
    });



// CRUD    
// Get Agents Details
async function getAgents() {
    const userId = id;
    try {
        const response = await axios.get(`/get-agents/${userId}`);
        const agentTitles = response.data.titles;
        const agentId = response.data.agentId;
        const agentDashboard = document.querySelector(".agents-dashboard");

        let count = 0;
        agentTitles.forEach(title => {


            const agentsDisplayDiv = document.createElement('div');
            agentsDisplayDiv.setAttribute('class', 'agents-display');

            const spanIcon = document.createElement('span');
            spanIcon.setAttribute('class', 'material-symbols-outlined');
            spanIcon.textContent = 'smart_toy';

            const agentName = document.createElement('p');
            agentName.textContent = title || 'No Title';

            const smallMuted = document.createElement('small');
            smallMuted.setAttribute('class', 'text-muted');
            smallMuted.textContent = '';


            const runAgentDiv = document.createElement('div');
            runAgentDiv.setAttribute('class', 'run-agent');
            runAgentDiv.setAttribute('data-id', agentId[count]);
            runAgentDiv.addEventListener('click', async (event) => {
                event.preventDefault();
                const button = event.currentTarget;
                const agentId = button.getAttribute('data-id');
                await getAgentById(agentId);  
            });

            const runButton = document.createElement('button');
            runButton.textContent = 'Run';

            const arrowIcon = document.createElement('span');
            arrowIcon.setAttribute('class', 'material-symbols-outlined');
            arrowIcon.textContent = 'arrow_forward';

            runAgentDiv.appendChild(runButton);
            runAgentDiv.appendChild(arrowIcon);

            agentsDisplayDiv.appendChild(spanIcon);
            agentsDisplayDiv.appendChild(agentName);
            agentsDisplayDiv.appendChild(smallMuted);
            agentsDisplayDiv.appendChild(runAgentDiv);

            agentDashboard.appendChild(agentsDisplayDiv);
            count++;
        });
    } catch (error) {
        alert("An error occurred while retrieving agents.");
        window.location.reload();
        // reset the frame
    }
}

// Chat with agent by ID
async function getAgentById(agentId){
    const userId = id;
    const agentID = agentId;

    if(agentFlag){
        return;
    }
    agentFlag = true;
    // * Prevent the event from happening again when already open
    try {
        // Fetch the agent data from the database
        const response = await axios.get(`/get-agent/${userId}/${agentId}`);
        const agentData = response.data;

        // Form container
        const formContainer = document.createElement('div');
        formContainer.classList.add('form-container');
        formContainer.style.position = 'fixed';
        formContainer.style.top = '5%';
        formContainer.style.left = '50%';
        formContainer.style.transform = "translateX(-50%)";
        formContainer.style.backgroundColor = 'white';
        formContainer.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';
        formContainer.style.padding = '20px';
        formContainer.style.zIndex = '1000';
        formContainer.style.borderRadius = 'var(--border-radius-2)';

        // Close button
        const closeButton = document.createElement('button');
        closeButton.textContent = "\u00D7";
        closeButton.style.float = 'right';
        closeButton.style.marginBottom = '10px';
        closeButton.style.background = "transparent";
        closeButton.style.fontSize = "25px";
        closeButton.style.color = "var(--color-info-dark)";
        closeButton.style.cursor = "pointer";
        closeButton.addEventListener('click', () => {
            document.body.removeChild(formContainer);
            agentFlag = false;
        });
        formContainer.appendChild(closeButton);


        // Form
        const form = document.createElement('form');
        form.classList.add('form-new-agent');
        form.setAttribute('data-id', agentID);
        form.addEventListener('submit', async (event) => {
            event.preventDefault();
            const button = event.currentTarget;
            const agentId = button.getAttribute('data-id');
            await updateAgent(agentId);
        });
        form.style.display = "grid";
        form.style.rowGap = "0.6rem";

        // Chat History Button
        const createAi = document.createElement('div');
        createAi.setAttribute('id','fill-agent-ai');
        createAi.setAttribute('data-id', agentID);
        createAi.style.display ="flex";
        createAi.style.gap = "0.5rem";
        createAi.style.alignItems = "center";
        createAi.style.justifyContent = "center";
        createAi.style.cursor = "pointer";
        createAi.style.padding = "8px";
        createAi.style.background = "var(--color-light)";
        createAi.style.borderRadius = "var(--border-radius-1)";
        createAi.style.color = "var(--color-info-dark)";
        createAi.style.marginBottom = "8px";
        createAi.style.maxWidth = 'fit-content';
        const createAiP = document.createElement('p');
        createAiP.textContent = "Chat History";
        const spanElement = document.createElement('span');
        spanElement.setAttribute('class', 'material-symbols-outlined');
        spanElement.textContent = 'bolt';

        createAi.addEventListener('click', async (event)=>{
            event.preventDefault();
            const button = event.currentTarget;
            const agentId = button.getAttribute('data-id');
            form.style.display = "none";

            const historyContainer = document.createElement('div');
            historyContainer.classList.add('history-container');
            Object.assign(historyContainer.style,{
                width: "70vw",
                height: "70vh",
                display: "grid",
                rowGap: "0.6rem",
                overflowY: "auto"     
            });
            formContainer.appendChild(historyContainer);
            
            await historyAgent(agentId);
        });


        createAi.appendChild(spanElement);
        createAi.appendChild(createAiP);
        form.appendChild(createAi);
    
        
        // Create a parent div container
        const divContainer = document.createElement('div');
        divContainer.classList.add('div-agent-container');
        divContainer.style.display = "grid";
        divContainer.style.rowGap = "0.6rem";

        form.appendChild(divContainer);

        // Agent title label and input
        const titleLabel = document.createElement('label');
        titleLabel.setAttribute('for', 'agent-title');
        titleLabel.textContent = 'Agent Title: ';
        divContainer.appendChild(titleLabel);

        const titleInput = document.createElement('input');
        titleInput.setAttribute('type', 'text');
        titleInput.setAttribute('id', 'agent-title');
        titleInput.setAttribute('name', 'title');
        titleInput.style.display = 'block';
        titleInput.style.marginBottom = '10px';
        titleInput.style.background = "var(--color-background)";
        titleInput.style.borderRadius = "var(--border-radius-1)";
        titleInput.style.height = "32px";
        titleInput.style.width = "100%";
        titleInput.style.padding = "8px";
        titleInput.style.border = "solid 2px var(--color-primary)";
        titleInput.value = response.data.title;
        divContainer.appendChild(titleInput);   


        // Agent background label and textarea
        const backgroundLabel = document.createElement('label');
        backgroundLabel.setAttribute('for', 'agent-background');
        backgroundLabel.textContent = 'Agent Background: ';
        divContainer.appendChild(backgroundLabel);

        const backgroundTextarea = document.createElement('textarea');
        backgroundTextarea.setAttribute('id', 'agent-background');
        backgroundTextarea.setAttribute('name', 'background');
        backgroundTextarea.style.display = 'block';
        backgroundTextarea.style.marginBottom = '10px';
        backgroundTextarea.style.background = "var(--color-background)";
        backgroundTextarea.style.borderRadius = "var(--border-radius-1)";
        backgroundTextarea.style.height = "250px";
        backgroundTextarea.style.width = "100%";
        backgroundTextarea.style.padding = "8px";
        backgroundTextarea.style.border = "2px solid var(--color-primary)";
        backgroundTextarea.style.resize = "none";
        backgroundTextarea.style.overflow = "auto";
        backgroundTextarea.value = response.data.background;
        divContainer.appendChild(backgroundTextarea);


        // Buttons part
        const buttonsDiv = document.createElement('div');
        buttonsDiv.className = 'agent-buttons';
        buttonsDiv.style.display = 'flex';
        buttonsDiv.style.alignItems = 'center';
        buttonsDiv.style.justifyContent = 'center';
        buttonsDiv.style.columnGap = "2rem";
        buttonsDiv.style.marginLeft = "5rem";
        buttonsDiv.style.marginRight = "5rem";

        form.appendChild(buttonsDiv);

        // Submit button
        const submitButton = document.createElement('button');
        submitButton.setAttribute('type', 'submit');
        submitButton.textContent = 'Update';
        submitButton.style.position = 'relative';
        submitButton.style.display = "flex";
        submitButton.style.justifyContent = "center";
        submitButton.style.background = "var(--color-primary)";
        submitButton.style.padding = "6px 12px"
        submitButton.style.textAlign = "center";
        submitButton.style.fontSize = "14px";
        submitButton.style.borderRadius = "var(--border-radius-1)";
        submitButton.style.color = "var(--color-light)";
        submitButton.style.cursor = "pointer";
        buttonsDiv.appendChild(submitButton);

        // Chat with Agent

        const chatButton = document.createElement('button');
        chatButton.textContent = 'Chat';
        chatButton.setAttribute('data-id', agentID);
        chatButton.style.position = 'relative';
        chatButton.style.display = "flex";
        chatButton.style.justifyContent = "center";
        chatButton.style.background = "var(--color-primary)";
        chatButton.style.padding = "6px 12px"
        chatButton.style.textAlign = "center";
        chatButton.style.fontSize = "14px";
        chatButton.style.borderRadius = "var(--border-radius-1)";
        chatButton.style.color = "var(--color-light)";
        chatButton.style.cursor = "pointer";
        chatButton.addEventListener('click', async (event)=>{
            event.preventDefault();
            const button = event.currentTarget;
            const chatId = button.getAttribute('data-id'); 
            await chatAgent(chatId);
        });
        buttonsDiv.appendChild(chatButton);

        // Delete Button
        const deleteButton = document.createElement('button');
        deleteButton.textContent = 'Delete';
        deleteButton.setAttribute('data-id', agentID);
        deleteButton.style.position = 'relative';
        deleteButton.style.display = "flex";
        deleteButton.style.justifyContent = "center";
        deleteButton.style.background = "var(--color-primary)";
        deleteButton.style.padding = "6px 12px"
        deleteButton.style.textAlign = "center";
        deleteButton.style.fontSize = "14px";
        deleteButton.style.borderRadius = "var(--border-radius-1)";
        deleteButton.style.color = "var(--color-light)";
        deleteButton.style.cursor = "pointer";
        deleteButton.addEventListener('click', async (event)=>{
            event.preventDefault();
            const button = event.currentTarget;
            const agentId = button.getAttribute('data-id');
            await deleteAgent(agentId);
        });

        // // History Button
        // const historyButton = document.createElement('button');
        // historyButton.textContent = 'History';
        // historyButton.setAttribute('data-id', agentID);
        // historyButton.style.position = 'relative';
        // historyButton.style.display = "flex";
        // historyButton.style.justifyContent = "center";
        // historyButton.style.background = "var(--color-primary)";
        // historyButton.style.padding = "6px 12px"
        // historyButton.style.textAlign = "center";
        // historyButton.style.fontSize = "14px";
        // historyButton.style.borderRadius = "var(--border-radius-1)";
        // historyButton.style.color = "var(--color-light)";
        // historyButton.style.cursor = "pointer";
        // historyButton.addEventListener('click', async (event)=>{
        //     event.preventDefault();
        //     const button = event.currentTarget;
        //     const agentId = button.getAttribute('data-id');
        //     form.style.display = "none";

        //     const historyContainer = document.createElement('div');
        //     historyContainer.classList.add('history-container');
        //     Object.assign(historyContainer.style,{
        //         width: "70vw",
        //         height: "70vh",
        //         display: "grid",
        //         rowGap: "0.6rem",
        //         overflowY: "auto"     
        //     });
        //     formContainer.appendChild(historyContainer);
            
        //     await historyAgent(agentId);
        // });

        buttonsDiv.appendChild(deleteButton);
        // buttonsDiv.appendChild(historyButton);
        formContainer.appendChild(form);
        document.body.appendChild(formContainer);

    } catch (error) {
        alert("An error occurred while retrieving the agent");
    }
}


// Post new Agent to the database
async function createAgent(){
    const userId = id;

    const titleInput = document.getElementById('agent-title').value;
    const backgroundInput = document.getElementById('agent-background').value;

    try {
        const response = await axios.post(`/create-agent/${userId}`,{
            title: titleInput,
            background: backgroundInput
        });

        console.log("Server response received:", response.data);
        alert("Agent created successfully!");
        window.location.href = '/home'
    } catch (error) {
        console.error(error.response.data.error);
        alert("An error occurred while creating new agent.");
    }
}


// Update Agent Information
async function updateAgent(agentID) {
    // You also need the agentId
    const userId = id;

    const titleInput = document.getElementById('agent-title').value;
    const backgroundInput = document.getElementById('agent-background').value;

    try {
        const response = await axios.put(`/update-agent/${userId}/${agentID}`, {
            newTitle: titleInput,
            newBackground: backgroundInput
        });

        console.log(response.data.message);
        alert("Agent updated successfully!");
        window.location.href = '/home'

    } catch (error) {
        console.error(error.response.data.error);
        alert("An error occurred while updating agent count.");
    }
    }


// Delete Agent
async function deleteAgent(agentID) {
    const userId = id;

    try {
        const response = await axios.delete(`/delete-agent/${userId}/${agentID}`);

        alert("Agent deleted successfully!");
        window.location.href = '/home'

    } catch (error) {
        console.error(error.response.data.error);
        alert("An error occurred while updating agent count.");
    }
}

// Redirect and chat with an Agent
async function chatAgent(chatId){
    const userId = id;
    const agentID = chatId;
    try {
        const response = await axios.get(`/chat-agent/${userId}/${agentID}`);

    if (response.status === 200) {
    const { title, background } = response.data;

    const isTrainingInfoRegistered = await axios.get(`/check-training-info/${userId}`);


    // Make a request that detects if there is any information registered at the array trainingInfo at mongodb

    window.location.href = `/chat?agentid=${agentID}&title=${encodeURIComponent(title)}&background=${encodeURIComponent(background)}`;
    }else{
        console.error('Error changing the location');
    }
    }catch(error){
        console.error("Error fetching agent data:", error.message);    
    }
}


// Get Chat History of Agent by ID
async function historyAgent(chatId){
    const userId = id;
    const agentID = chatId;
    const formContainerDiv = document.querySelector('.form-container');
    const historyContainer = document.querySelector('.history-container');
    const formNewAgent = document.querySelector('.form-new-agent');
    try {
        const response = await axios.get(`/chat-history-agent/${userId}/${agentID}`);

    if (response.status === 200) {
    const { title, background, chat, chatLength } = response.data;

    const chatLengthString = JSON.stringify(chatLength);

    // *Remove Span
    const returnChat = document.createElement('span');
    returnChat.classList.add('material-symbols-outlined');
    returnChat.textContent = 'arrow_back';
    returnChat.style.textAlign = "left";
    returnChat.style.fontSize = "1.6rem";
    returnChat.style.fontWeight = "bold";
    returnChat.style.color = "var(--color-info-dark)";
    returnChat.style.padding = "8px";
    returnChat.style.cursor = "pointer";

    formContainerDiv.appendChild(returnChat);

    formContainerDiv.appendChild(historyContainer);

    // *Group all of these elements into one div, after you press return, remove the div.
    const chatFooter = document.createElement('div');
    chatFooter.classList.add('chat-footer');

    formContainerDiv.appendChild(chatFooter);

    const chatAmount = document.createElement('p');
    chatAmount.style.textAlign = "center";
    chatAmount.style.fontSize = "14px";
    chatAmount.style.padding = "12px";
    
    chatFooter.appendChild(chatAmount);

    const chatPage = document.createElement('div');
    chatPage.style.display = "block";
    chatPage.style.position = "relative";
    chatPage.style.height = "8px";
    chatPage.style.width = "8px";
    chatPage.style.borderRadius = "50%";
    chatPage.style.background = "var(--color-dark-variant)";
    chatPage.style.left = "50%";
    chatPage.style.transform = "translateX(-50%)";

    chatFooter.appendChild(chatPage);


    returnChat.addEventListener('click', async (event) => {
        event.preventDefault();
        formContainerDiv.removeChild(historyContainer);
        formContainerDiv.style.display = "block";
        formNewAgent.style.display = "block";
        returnChat.remove();
        chatFooter.remove();
    });


    // User Chat
    chat.forEach((userChatObj,index) => {

        chatAmount.textContent = `${index + 1} / ${chatLengthString}`;

        // Create the user container div
        const userContainer = document.createElement('div');
        userContainer.style.display = "flex";
        userContainer.style.alignItems = "flex-start";
        userContainer.style.border = "1px solid #ddd";
        userContainer.style.borderRadius = "8px";
        userContainer.style.padding = "10px";
        userContainer.style.width = "100%";
        userContainer.style.fontFamily = "Arial, sans-serif";
        userContainer.style.alignItems = "center";

        // Create the user avatar span
        const userAvatar = document.createElement('span');
        userAvatar.classList.add('material-symbols-outlined');
        userAvatar.style.display = "inline-block";
        userAvatar.style.borderRadius = "50%";
        userAvatar.style.backgroundColor = "var(--color-light)";
        userAvatar.style.padding = "2px";
        userAvatar.style.color = "var(--color-primary)";
        userAvatar.style.fontSize ="16px";
        userAvatar.style.marginRight = "12px";

        // Create the user info div
        const userInfo = document.createElement('div');
        userInfo.style.flexGrow = "1";

        // Create the user name paragraph
        const userName = document.createElement('p');
        userName.style.fontSize = "14px";
        userName.style.fontWeight = "bold";
        userName.style.margin = "0";
        

        // Create the user text paragraph
        const userText = document.createElement('p');
        userText.textContent = userChatObj.user;
        Object.assign(userText.style, {
            textAlign: "left",
            fontSize: "12px",
            margin: "4px 0px 0px",
            color: "rgb(85, 85, 85)",
            "overflowWrap": "anywhere",
            overflow: "hidden",
            textOverflow: "ellipsis",
            display: "-webkit-box",
            WebkitLineClamp: "12", 
            WebkitBoxOrient: "vertical"
        });

        userText.style.fontSize = "12px";
        userText.style.color = "#555";
        userText.style.margin = "4px 0 0";

        // Assemble the structure
        userInfo.appendChild(userName);
        userInfo.appendChild(userText);
        userContainer.appendChild(userAvatar);
        userContainer.appendChild(userInfo);

        // Append the user container to the body (or another element)
        historyContainer.appendChild(userContainer);

        if(userChatObj.user){
            userText.textContent = userChatObj.user;
            userAvatar.textContent = "person";
            userName.textContent = "User";
        }else{
            userText.textContent = userChatObj.assistant;
            userAvatar.textContent = "smart_toy";
            userName.textContent = "Assistant";
        }

    });

    }
    else{
        console.error('Error changing the location');
    }
    }catch(error){
        console.error("Error fetching agent data:", error.message);    
    }
}





// async function chatAgent(chatId){
//     const userId = id;
//     const agentId = chatId;

//     try {
//         const response = await axios.get(`/chat-agent/${userId}/${agentId}`);
//         const agentData = response.data;

//         if (agentData) {
//             window.location.href = `/chat?title=${agentData.title}&background=${agentData.background}`;
//         }else{
//             console.error("Agent data not found!");
//         } 
//     }catch(error){
//         console.error("Error fetching agent data:", error.message);    }
// }

});

</script>