<script>

document.addEventListener("DOMContentLoaded",()=>{

    let new_worflow;
    
    const userId = id;
    const userWorkflows = workflowCount;

    // List avaliable workflows
    const trigger_new_workflow = document.getElementById('button-new-workflow');
    trigger_new_workflow.addEventListener('click', () => {
        // new_worflow = true;
        // createWorkflow();
        window.location.href = "/create?active=workflows";
    });

    const trigger_workflow = document.querySelector('.run-agent'); 
    trigger_workflow.addEventListener('click', () => {
        new_worflow = false;
        createWorkflow();
    });


function createWorkflow(){

    let workflowTap = 0;


    // Create a container div with class and data attributes
    const stepDiv = document.createElement('div');
    stepDiv.classList.add('step');
    stepDiv.setAttribute('data-step', '2');
    Object.assign(stepDiv.style, {
    display: 'grid',
    position: 'fixed',
    top: '1vh',
    left: '50%',
    transform: 'translateX(-50%)',
    background: 'white',
    zIndex: '1',
    padding: '18px 24px 18px',
    // maxHeight: '82vh',
    borderRadius: 'var(--border-radius-2)',
    rowGap: '0.72rem',
    border: '2px solid var(--color-info-dark)'
    });

    const outline = document.createElement('div');

    Object.assign(outline.style, {
        position: 'fixed',        
        top: '0',                    
        left: '0',                   
        width: '100%',               
        height: '100%',              
        zIndex: '0',
        background: "#4e677963",               
        pointerEvents: 'none'        
    });


    const flexContainer = document.createElement('div');
    Object.assign(flexContainer.style,{
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        columnGap: "2rem"
    });

    // Close button
    const closeButton = document.createElement('div');
    closeButton.textContent = "\u00D7";
    Object.assign(closeButton.style, {
        display: 'flex',
        width: '2rem',
        height: '2rem',
        color: 'var(--color-info-dark)',
        cursor: 'pointer',
        textAlign: 'center',
        fontWeight: 'bold',
        userSelect: 'none',
        marginLeft: 'auto',
        justifyContent: 'center',
        fontSize: '26px',
        alignItems: 'center'
    });

    closeButton.addEventListener('click', () => {
        stepDiv.remove();
        outline.remove();
        closeButton.remove();
    });

    // Add the heading
    const heading = document.createElement('h1');
    Object.assign(heading.style,{
        textAlign: "center",
        fontSize: "18px"
    })
    stepDiv.appendChild(closeButton);
    stepDiv.appendChild(heading);
    stepDiv.appendChild(flexContainer);

    // Create the AI button container
    const generateAiBtnDiv = document.createElement('div');
    generateAiBtnDiv.classList.add('generate-ai-btn');
    Object.assign(generateAiBtnDiv.style,{
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        columnGap: "0.4rem",
        padding: "6px",
        borderRadius: "var(--border-radius-1)",
        background: "var(--color-background)",
        color: "var(--color-info-dark)",
        cursor: "pointer",
    });

    // Add the icon span
    const span = document.createElement('span');
    span.classList.add('material-symbols-outlined');
    span.textContent = 'stylus_note';
    generateAiBtnDiv.appendChild(span);

    // Workflow History
    const workflow_history = document.createElement('div');
    workflow_history.classList.add('history-workflow');
    workflow_history.addEventListener('click', async () => {

    if(workflowTap != 1){
         // Hide textarea

    workflowTap = 1;


document.querySelector('.workflow-textarea').style.display = "none";
// document.querySelector('.run-workflow-container').style.display = "none";
document.querySelector('.run-id-txt-small').style.display = "none" ;

let saveWorkflow = document.querySelector('.save-workflow');
const mouseleaveEvent = new Event('mouseleave');
saveWorkflow.dispatchEvent(mouseleaveEvent);


let existingGrid = document.querySelector('.workflow-history-grid');
if (existingGrid) {
    // Remove the existing grid
    existingGrid.remove();
}

// Fetch Workflow History
try {
    const response = await axios.get(`/api/get-workflowid-history/${userId}`);
    const workflowIds = response.data.runIds; // Ensure this matches your backend output

    if (workflowIds && workflowIds.length > 0) {
        // Create History Grid Container
        const workflow_history_grid = document.createElement('div');
        workflow_history_grid.classList.add('workflow-history-grid');
        Object.assign(workflow_history_grid.style, {
            display: "grid",
            gridTemplateColumns: "1fr",
            width: "50vw",
            padding: "12px",
            overflowY: "auto",
            background: "var(--color-light)",
            border: "2px solid var(--color-dark-variant)"
        });

        // Append to Parent Container
        stepDiv.appendChild(workflow_history_grid);

        // Loop Through Workflow IDs and Create Elements
        workflowIds.forEach((runId, index) => {
            // Flexible Container
            const workflow_history_flex = document.createElement('div');
            Object.assign(workflow_history_flex.style, {
                display: "flex",
                background: "var(--color-light)",
                justifyContent: "space-between",
                alignItems: "center",
                marginBottom: "12px" // Spacing between items
            });

            // Inner Div Container
            const workflow_history_div = document.createElement('div');
            Object.assign(workflow_history_div.style, {
                display: "flex",
                background: "var(--color-light)",
                border: "2px solid var(--color-dark-variant)",
                padding: "6px",
                borderRadius: "var(--border-radius-1)",
                cursor: "pointer",
                alignItems: "center",
                columnGap: "0.2rem"
            });

            // View Button
            const workflow_history_button = document.createElement('p');
            workflow_history_button.textContent = "View";
            Object.assign(workflow_history_button.style, {
                display: "block",
                color: "var(--color-dark)"
            });

            // Edit Icon
            const workflow_history_span = document.createElement('span');
            workflow_history_span.classList.add('material-symbols-outlined');
            workflow_history_span.textContent = "edit";
            Object.assign(workflow_history_span.style, {
                display: "block",
                background: "var(--color-light)",
                fontSize: "18px"
            });

            // Title
            const workflow_history_title = document.createElement('h5');
            workflow_history_title.textContent = `Workflow Run ${index + 1}`;
            Object.assign(workflow_history_title.style, {
                display: "block",
                fontWeight: "bold"
            });

            // Description (Placeholder)
            const workflow_history_description = document.createElement('p');
            workflow_history_description.textContent = `This is a description for workflow run.`;
            Object.assign(workflow_history_description.style, {
                display: "block",
                fontSize: "14px"
            });

            // Small Text for ID
            const workflow_history_small = document.createElement('small');
            workflow_history_small.classList.add('text-muted');
            workflow_history_small.textContent = `Workflow Run ID: ${runId}`;
            Object.assign(workflow_history_small.style, {
                display: "block",
                fontStyle: "italic"
            });

            // Append Elements
            workflow_history_div.appendChild(workflow_history_span);
            workflow_history_div.appendChild(workflow_history_button);
            workflow_history_flex.appendChild(workflow_history_title);
            workflow_history_flex.appendChild(workflow_history_div);
            workflow_history_grid.appendChild(workflow_history_flex);
            workflow_history_grid.appendChild(workflow_history_description);
            workflow_history_grid.appendChild(workflow_history_small);
        });
    } else {
        console.log("No workflow IDs found.");
    }
} catch (error) {
    console.error("Error fetching workflow history:", error);
}
    }
});


    Object.assign(workflow_history.style,{
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        columnGap: "0.4rem",
        padding: "6px",
        borderRadius: "var(--border-radius-1)",
        background: workflowTap === 1 ? "var(--color-primary)" : "var(--color-background)",
        color: workflowTap === 1 ? "var(--color-white)" : "var(--color-info-dark)",
        cursor: "pointer",
        transition: "background-color 0.3s ease, color 0.3s ease",
        border: '2px solid var(--color-info-dark)'
    });

   
    workflow_history.addEventListener('mouseenter', () => {workflow_history.style.backgroundColor = workflowTap === 1 ? "var(--color-primary)" : "var(--color-primary)";workflow_history.style.color = workflowTap === 1 ? "var(--color-white)" : "var(--color-white)" ;});
    workflow_history.addEventListener('mouseleave', () => {workflow_history.style.backgroundColor = workflowTap === 1 ? "var(--color-primary)" : "var(--color-background)";workflow_history.style.color = workflowTap === 1 ? "var(--color-white)" : "var(--color-info-dark)";});


    // Add the icon span
    const span_history = document.createElement('span');
    span_history.classList.add('material-symbols-outlined');
    span_history.textContent = 'history';
    workflow_history.appendChild(span_history);

    // Add the button with an onclick event
    const buttonHistoryDiv = document.createElement('div');
    buttonHistoryDiv.setAttribute('type', 'button');
    buttonHistoryDiv.setAttribute('onclick', '');
    buttonHistoryDiv.textContent = 'History (0)';
    workflow_history.appendChild(buttonHistoryDiv);

    // Append the AI button container to stepDiv
    flexContainer.appendChild(workflow_history);

    // Save the workflow
    const saveContent = document.createElement('div');
    saveContent.classList.add('save-workflow');
    Object.assign(saveContent.style,{
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        columnGap: "0.4rem",
        padding: "6px",
        borderRadius: "var(--border-radius-1)",
        background: workflowTap === 0 ? "var(--color-primary)" : "var(--color-background)",
        color: workflowTap === 0 ? "var(--color-white)" : "var(--color-info-dark)",
        cursor: "pointer",
        transition: "background-color 0.3s ease, color 0.3s ease",
        border: '2px solid var(--color-info-dark)'
    });
    saveContent.addEventListener('mouseenter', () => {saveContent.style.backgroundColor = workflowTap === 0 ? "var(--color-primary)" : "var(--color-primary)" ;saveContent.style.color = workflowTap === 0 ? "var(--color-white)" : "var(--color-white)";});
    saveContent.addEventListener('mouseleave', () => {saveContent.style.backgroundColor = workflowTap === 0 ? "var(--color-primary)" : "var(--color-background)" ;saveContent.style.color = workflowTap === 0 ? "var(--color-white)" : "var(--color-info-dark)";});

    // Add the icon span
    const span_save = document.createElement('span');
    // span_save.classList.add('material-symbols-outlined');
    // span_save.textContent = 'save';
    saveContent.appendChild(span_save);

    // Add the button with an onclick event
    const buttonSaveDiv = document.createElement('div');
    buttonSaveDiv.setAttribute('type', 'button');
    buttonSaveDiv.setAttribute('onclick', '');
    
    // buttonSaveDiv.textContent = 'Save';
    saveContent.appendChild(buttonSaveDiv);

    // Append the AI button container to stepDiv
    flexContainer.appendChild(saveContent);

    // Delete the workflow
    const deleteContent = document.createElement('div');
    deleteContent.classList.add('delete-workflow');

    Object.assign(deleteContent.style,{
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        columnGap: "0.4rem",
        padding: "6px",
        borderRadius: "var(--border-radius-1)",
        background: "var(--color-background)",
        color: "var(--color-info-dark)",
        cursor: "pointer",
        transition: "background-color 0.3s ease, color 0.3s ease",
        border: '2px solid var(--color-info-dark)'
    });

   
    deleteContent.addEventListener('mouseenter', () => {deleteContent.style.backgroundColor = "var(--color-primary)";deleteContent.style.color = "var(--color-white)";});
    deleteContent.addEventListener('mouseleave', () => {deleteContent.style.backgroundColor = "var(--color-background)";deleteContent.style.color = "var(--color-info-dark)";});


    // Add the icon span
    const span_delete = document.createElement('span');
    span_delete.classList.add('material-symbols-outlined');
    span_delete.textContent = 'delete';
    deleteContent.appendChild(span_delete);

    // Add the button with an onclick event
    const buttonDeleteDiv = document.createElement('div');
    buttonDeleteDiv.setAttribute('type', 'button');
    buttonDeleteDiv.setAttribute('onclick', '');
    buttonDeleteDiv.textContent = 'Delete Run';
    deleteContent.appendChild(buttonDeleteDiv);

    // Append the AI button container to stepDiv
    flexContainer.appendChild(deleteContent);


    // Boolean

    if(new_worflow){

    heading.textContent = 'Create a new Workflow';

    // Add the button with an onclick event
    const buttonDiv = document.createElement('div');
    buttonDiv.setAttribute('type', 'button');
    buttonDiv.setAttribute('onclick', 'autogenerate()');
    buttonDiv.textContent = 'Autogenerate with AI';
    generateAiBtnDiv.appendChild(buttonDiv);

    // Append the AI button container to stepDiv
    flexContainer.appendChild(generateAiBtnDiv);

    span_save.classList.add('material-symbols-outlined');
    span_save.textContent = 'save';

    buttonSaveDiv.textContent = 'Save';

    // Create the form
    const form = document.createElement('form');
    form.id = 'businessForm';
    Object.assign(form.style,{
    width: "50vw",
    height: "60vh",
    padding: "12px",
    overflowY: "auto"
    });

    // Add form labels and inputs
    const fields = [
        { label: 'About Yourself:', id: 'themselves', type: 'textarea', placeholder: 'Tell us about yourself', rows: 4 },
        { label: 'About Your Business:', id: 'business', type: 'textarea', placeholder: 'Describe your business', rows: 4 },
        { label: 'Your Offers:', id: 'offers', type: 'textarea', placeholder: 'What products or services do you offer?', rows: 4 },
        { label: 'Your Niche:', id: 'niche', type: 'input', placeholder: 'Specify your niche' }
    ];

    fields.forEach(field => {
        const label = document.createElement('label');
        label.setAttribute('for', field.id);
        label.textContent = field.label;
        form.appendChild(label);

        if (field.type === 'textarea') {
            const textarea = document.createElement('textarea');
            textarea.id = field.id;
            textarea.name = field.id;
            textarea.rows = field.rows;
            textarea.placeholder = field.placeholder;
            textarea.style.resize = "none";
            textarea.style.height = "10vh";
            textarea.style.marginTop = "0.6rem";
            textarea.style.marginBottom = "0.6rem";
            form.appendChild(textarea);
        } else if (field.type === 'input') {
            const input = document.createElement('input');
            input.type = 'text';
            input.id = field.id;
            input.name = field.id;
            input.placeholder = field.placeholder;
            input.style.height = "5vh";
            input.style.background = "var(--color-light)";
            input.style.borderRadius = "var(--border-radius-1)";
            input.style.padding = "12px";
            input.style.color = "var(--color-info-dark)";
            input.style.marginTop = "1rem";
            input.style.marginLeft = "1rem";
            input.style.width = "70%";
            form.appendChild(input);
        }
    });
    // Append the form to stepDiv
    stepDiv.appendChild(form);
    }
    else{
        heading.textContent = 'Product Name Generator';

        span_save.classList.add('material-symbols-outlined');
        span_save.textContent = 'automation';

        buttonSaveDiv.textContent = 'Workflow';

        const contentWorkflow = document.createElement('textarea');
        contentWorkflow.setAttribute('class', 'workflow-textarea');
        Object.assign(contentWorkflow.style,{
        width: "50vw",
        height: "60vh",
        padding: "12px",
        overflowY: "auto",
        background: "var(--color-light)",
        border: "2px solid var(--color-dark-variant)"
    });


        // Run Workflow
        const runWorkflow = document.createElement('div');
            runWorkflow.classList.add('run-workflow-container');
            Object.assign(runWorkflow.style,{
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                columnGap: "0.4rem",
                padding: "6px",
                borderRadius: "var(--border-radius-1)",
                background: "var(--color-background)",
                color: "var(--color-info-dark)",
                cursor: "pointer",
                transition: "background-color 0.3s ease, color 0.3s ease",
                border: '2px solid var(--color-info-dark)'
            });
            runWorkflow.addEventListener('mouseenter', () => {runWorkflow.style.backgroundColor = "var(--color-primary)";runWorkflow.style.color = "var(--color-white)";});
            runWorkflow.addEventListener('mouseleave', () => {runWorkflow.style.backgroundColor = "var(--color-background)";runWorkflow.style.color = "var(--color-info-dark)";});

            // Add the icon span
            const span_run = document.createElement('span');
            span_run.classList.add('material-symbols-outlined');
            span_run.textContent = 'commit';
            runWorkflow.appendChild(span_run);

            // Add the button with an onclick event
            const buttonRunDiv = document.createElement('div');
            buttonRunDiv.setAttribute('type', 'button');
            buttonRunDiv.setAttribute('onclick', '');
            buttonRunDiv.textContent = "Run Workflow"
            // buttonSaveDiv.textContent = 'Save';
            runWorkflow.appendChild(buttonRunDiv);
            


        const runIdTxt = document.createElement('small');
        runIdTxt.classList.add('run-id-txt-small');
        // runIdTxt.setAttribute('class', 'text-muted');

    let isScreenActive = false; // Prevent multiple overlays
    let deleteWorkflowbyid = false; // Prevent multiple overlays

    (async () => {
        try {
            const response = await fetch(`/api/get-workflow/${userId}`, {
                method: "GET",
                headers: { "Content-Type": "application/json" }
            });

            if (!response.ok) {
                throw new Error("Failed to fetch workflow data");
            }

            const data = await response.json();

            // Assuming workflowRunId is an array, get the last output
            if (data.workflowRunId && data.workflowRunId.length > 0) {
                const lastWorkflow = data.workflowRunId[data.workflowRunId.length - 1];
                // contentWorkflow.value = lastWorkflow.output || "";

                // Convert to JSON
                const workflowOutputString = lastWorkflow.output;
                const workflowOutput = JSON.parse(workflowOutputString);

                // Get the Number of Indexes
                const workflowIndex = workflowOutput.workflow_run_output.length;

                let text = "";

                // Go Trough all indexes and find the Index
                workflowOutput.workflow_run_output.forEach(item => {
                    text += item.content + "\n";
                    contentWorkflow.value = text.replace(/\*/g, '');
                });

                runWorkflow.style.display = "flex";
                runIdTxt.textContent = 'Workflow Run ID: ' + workflowOutput.workflow_run_id || "";
                deleteContent.setAttribute('data-id', workflowOutput.workflow_run_id);
                deleteContent.addEventListener('click', async (event)=>{
                    event.preventDefault();
                    const button = event.currentTarget;
                    const workflowId = button.getAttribute('data-id');
                    await deleteAgent(workflowId);
                });

                function deleteAgent(workflowId){

                if (isScreenActive || deleteWorkflowbyid) return; // Prevent multiple overlays
                isScreenActive = true;

                const runId = workflowId;

                // Create confirmation screen container
                const confirmationScreen = document.createElement('div');
                confirmationScreen.id = 'confirmationScreen';
                confirmationScreen.style = `
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgb(0 5 35 / 25%);
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    opacity: 0;
                    pointer-events: none;
                    transition: opacity 0.5s ease;
                    z-index: 4;
                `;

                // Create modal content
                const modal = document.createElement('div');
                modal.style = `
                    background: #fff;
                    padding: 20px;
                    border-radius: 8px;
                    text-align: center;
                    user-select: none;
                `;

                // Add modal text
                const modalText = document.createElement('p');
                modalText.textContent = 'Delete this workflow run?';
                modal.appendChild(modalText);

                // Add Yes button
                const yesBtn = document.createElement('button');
                yesBtn.id = 'yesBtn';
                yesBtn.textContent = 'Yes';
                yesBtn.style = 'margin: 12px; padding: 10px 20px; font-size: 14px; cursor: pointer';
                modal.appendChild(yesBtn);

                // Add No button
                const noBtn = document.createElement('button');
                noBtn.id = 'noBtn';
                noBtn.textContent = 'No';
                noBtn.style = 'margin: 12px; padding: 10px 20px; font-size: 14px; cursor: pointer';
                modal.appendChild(noBtn);

                confirmationScreen.appendChild(modal);
                document.body.appendChild(confirmationScreen);

                // Trigger the overlay appearance
                requestAnimationFrame(() => {
                    confirmationScreen.style.opacity = '1';
                    confirmationScreen.style.pointerEvents = 'all';
                });

                // Close confirmation function
                function closeDelete() {
                    confirmationScreen.style.opacity = '0';
                    confirmationScreen.style.pointerEvents = 'none';

                    // Wait for the opacity transition to end before removing elements
                    setTimeout(() => {
                        confirmationScreen.remove();
                        isScreenActive = false; // Allow new overlays
                    }, 500);
                }

                async function confirmDelete(){
                    deleteWorkflowbyid = true;
                    try {
                    const response = await axios.post('/api/removeWorkflowId', { runId });
                    console.log('Workflow ID removed:', response.data);

                    // Step 2: If the first request is successful, fetch the updated workflow data
                    const fetchResponse = await fetch(`/api/get-workflow/${userId}`, {
                        method: 'GET',
                        headers: { 'Content-Type': 'application/json' }
                    });

                    if (!fetchResponse.ok) {
                        throw new Error('Failed to fetch workflow data');
                    }

                    const data = await fetchResponse.json();

                    // Handle the fetched workflow data
                    if (data.workflowRunId && data.workflowRunId.length > 0) {
                        const lastWorkflow = data.workflowRunId[data.workflowRunId.length - 1];

                        // Convert to JSON
                        const workflowOutputString = lastWorkflow.output;
                        const workflowOutput = JSON.parse(workflowOutputString);

                        // Process workflow data
                        let text = '';
                        workflowOutput.workflow_run_output.forEach((item) => {
                            text += item.content + '\n';
                            contentWorkflow.value = text.replace(/\*/g, '');
                        });

                        runWorkflow.style.display = "flex";
                        runIdTxt.textContent = 'Workflow Run ID: ' + (workflowOutput.workflow_run_id || '');
                        deleteContent.setAttribute('data-id', workflowOutput.workflow_run_id);

                        // Set up the delete agent function
                        deleteContent.addEventListener('click', async (event) => {
                            event.preventDefault();
                            const button = event.currentTarget;
                            const workflowId = button.getAttribute('data-id');
                            await deleteAgent(workflowId);
                        });
                        deleteWorkflowbyid = false;
                    } else {
                        contentWorkflow.value = 'No workflow run found. Consider creating a new one!';
                    }
                    } catch (error) {
                        console.error('Error removing workflow ID:', error);
                    }

                    confirmationScreen.style.opacity = '0';
                    confirmationScreen.style.pointerEvents = 'none';
                    // Wait for the opacity transition to end before removing elements
                    setTimeout(() => {
                        confirmationScreen.remove();
                        isScreenActive = false; // Allow new overlays
                    }, 500);
                }

                // Add click events to Yes and No buttons
                yesBtn.addEventListener('click', confirmDelete);
                noBtn.addEventListener('click', closeDelete);
            }



            } else {
                contentWorkflow.value = "No workflow run found. Consider creating a new one!"; // Fallback message
            }


        } catch (error) {
            console.error("Error fetching workflow data:", error);
            contentWorkflow.value = "Error loading workflows"; // Error fallback
        }
    })();

    // Workflow Press
    saveContent.addEventListener('click',()=>{

        // let HistoryTab = document.querySelector('.history-workflow');
        // HistoryTab.dispatchEvent('mouseleave');

        workflowTap = 0;
        workflow_history.style.backgroundColor = workflowTap === 1 ? "var(--color-primary)" : "var(--color-background)";workflow_history.style.color = workflowTap === 1 ? "var(--color-white)" : "var(--color-info-dark)";
    
        // Hide
        // document.querySelector('.workflow-history-grid').style.display = "none";
        
        // Show
        document.querySelector('.workflow-textarea').style.display = "block";
        document.querySelector('.run-workflow-container').style.display = "flex";
        document.querySelector('.run-id-txt-small').style.display = "block";

    });

    // Method 2 Proxy
    
    runWorkflow.addEventListener("click", async () => {

        // Create the loading screen container
        const loadingScreen = document.createElement('div');
        loadingScreen.id = 'loading-screen';
        loadingScreen.style.position = 'fixed';
        loadingScreen.style.top = '0';
        loadingScreen.style.left = '0';
        loadingScreen.style.width = '100%';
        loadingScreen.style.height = '100%';
        loadingScreen.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
        loadingScreen.style.zIndex = '9999';

        // Create the spinner element
        const spinner = document.createElement('div');
        spinner.classList.add('spinner');

        // Apply spinner styles dynamically
        spinner.style.border = '5px solid #f3f3f3';
        spinner.style.borderTop = '5px solid #3498db';
        spinner.style.borderRadius = '50%';
        spinner.style.width = '50px';
        spinner.style.height = '50px';
        spinner.style.animation = 'spin 2s linear infinite';
        spinner.style.margin = 'auto';
        spinner.style.position = 'absolute';
        spinner.style.top = '0';
        spinner.style.bottom = '0';
        spinner.style.left = '0';
        spinner.style.right = '0';

        // Append the spinner to the loading screen
        loadingScreen.appendChild(spinner);

        // Append the loading screen to the body
        document.body.appendChild(loadingScreen);

        contentWorkflow.value = "";
        contentWorkflow.readOnly = true;

    try {
        const workflowID = "67d47dae4a63a8f936bca702"; // Workflow ID
        const data = {
            "Idea to Convey": "Hernesto"
        };

        const response = await axios.post("/proxy/workflow", {
            workflowID, // Send workflowID to backend
            data, // Send workflow details
            userId
        });

        // Workflow Run Id
        const workflowRunId = response.data.workflow_run_id; // Use the response from the backend
        console.log(`Workflow Run ID: ${workflowRunId}`);

        // Socket.IO Logic
        const socket = io();
        socket.emit("registerSocket", { workflowRunId });

        // Handle server confirmation
        socket.on("socketRegistered", ({ message }) => {
            console.log(message);
        });

        socket.on("updateTextarea", async (data) => {


        const workflowContent = JSON.parse(data.message);

        // Get the Number of Indexes
        const workflowIndex = workflowContent.workflow_run_output.length;

        let text = "";

        // Go Trough all indexes and find the Index
        workflowContent.workflow_run_output.forEach(item => {
            text += item.content + "\n";
            contentWorkflow.value = text.replace(/\*/g, '');
        });

        runIdTxt.textContent = 'Workflow Run ID: ' + workflowContent.workflow_run_id || "";

            // Format Text
            // contentWorkflow.value += data.message + "\n";

            const dbUrl = `/api/save-workflow-id`; // Backend API endpoint
            const saveData = { 
                userId: userId, // Replace with the actual user ID
                workflowRunId: workflowRunId, // Replace with the workflow run ID
                output: data.message, // Include the message in the payload
                title: "test title"
            };
            try {
                // Make the POST request to save data to the backend
                const saveResponse = await axios.post(dbUrl, saveData, {
                    headers: { 'Content-Type': 'application/json' }
                });


            console.log('Saved to database:', saveResponse.data); // Log success response
            } catch (error) {
                console.error('Error saving to database:', error); // Use the correct error object
            }
            loadingScreen.remove();
            contentWorkflow.readOnly = false;
            socket.emit("closeConexion", { workflowRunId });
        });

    } catch (error) {
        console.error("Error:", error.response ? error.response.data : error.message);
    }
});


// buttonSaveDiv.addEventListener('click',()=>{
//         const userId = id;
//             // Trigger Workflow
//             try {
//             const apiKey = 'sk--dUmIovpvZ3Vb83tCd9Ieg20250313174645';
//             const workflowID = '67d31c6b83d521810bc0c88e';
//             const url = `https://api-v3.mindpal.io/api/workflow/run?workflow_id=${workflowID}&openai_api_key=${apiKey}&anthropic_api_key=${apiKey}&google_api_key=${apiKey}&groq_api_key=${apiKey}`;
//             const headers = {
//             'accept': 'application/json',
//             'x-api-key': apiKey,
//             'Content-Type': 'application/json'
//             };
//             const data = {
//             "Goal of the Email Campaign": "Obtain more views in my youtube channel",
//             "Target Audience": "Adults"
//             };
//             axios.post(url, data, { headers })
//             .then(async(response) => {

//                 // Storage Workflow Run ID Logic
//                 const workflowRunId = response.data.workflow_run_id; 
//                 console.log(workflowRunId);

//                 // Socket.io Logic
//                 const socket = io(); // Connect to server WebSocket
//                 socket.emit("registerSocket", { workflowRunId });

//                 // Handle a response from the server (if the server emits a confirmation event)
//                 // socket.on("socketRegistered", ({ message }) => {
//                 //     console.log(message);
//                 // });

//                 // const getDataBtn = document.createElement('div');
//                 // getDataBtn.classList.add('get-workflow-by-id');
//                 // getDataBtn.addEventListener('click',()=>{
//                 //     pollForWorkflowOutput(workflowRunId, headers);
//                 // })
//                 // Object.assign(getDataBtn.style,{
//                 //     display: "flex",
//                 //     alignItems: "center",
//                 //     justifyContent: "center",
//                 //     columnGap: "0.4rem",
//                 //     padding: "6px",
//                 //     borderRadius: "var(--border-radius-1)",
//                 //     background: "var(--color-background)",
//                 //     color: "var(--color-info-dark)",
//                 //     cursor: "pointer",
//                 //     width: "50vw",
//                 //     height: "10vh",
//                 //     padding: "12px",
//                 // }); 
//                 // stepDiv.appendChild(getDataBtn);

//                 // socket.on("updateTextarea", (data) => {
//                 //     contentWorkflow.value += data.message + "\n";
//                 // });

//                 const dbUrl = `/api/save-workflow-id`; // Endpoint to save data

//                     const saveData = { 
//                         userId: userId, // Pass user ID
//                         workflowRunId: workflowRunId // Pass the Workflow Run ID
//                     };

//                     try {
//                         // POST request to save workflowRunId to database
//                         const saveResponse = await axios.post(dbUrl, saveData, {
//                             headers: { 'Content-Type': 'application/json' }
//                         });
//                         console.log('Saved to database:', saveResponse.data);
//                     } catch (dbError) {
//                         console.error('Error saving to database:', dbError);
//                     }
//             })
                
//             .catch(error => console.error('Error:', error));

//             } catch (error) {
//                 console.error('Error in fetchStatus:', error);
//             }
// });

stepDiv.appendChild(contentWorkflow);
stepDiv.appendChild(runWorkflow);
stepDiv.appendChild(runIdTxt);

// function pollForWorkflowOutput(workflowRunId, headers) {
//     const getUrl = `https://api-v3.mindpal.io/api/workflow-run-result/retrieve-by-id?run_id=${workflowRunId}`;
//     let interval;

//     // Start the polling interval
//     // interval = setInterval(() => {
//         // Perform the GET request
//         axios.get(getUrl, { headers })
//             .then(getResponse => {
//                 console.log('GET Response:', getResponse.data);

//                 // GET Request Output Data
//                 const workflowData = getResponse.data;

//                 // Workflow input and output arrays
//                 const workflowInput = workflowData.workflow_run_input; // Array
//                 const workflowOutput = workflowData.workflow_run_output; // Array

//                 // Check the last index of workflow_run_input
//                 const lastInputIndex = workflowInput.length - 1; // Zero-based index
//                 if (workflowInput[lastInputIndex]) {
//                     console.log("Last input index reached. Info received.");
//                 }

//                 // Check the last index of workflow_run_output
//                 const lastOutputIndex = workflowOutput.length - 1; // Zero-based index
//                 if (workflowOutput[lastOutputIndex]) {
//                     console.log("Last output index reached. Info received.");
//                 }

//                 // Optional: Log lengths and verify content
//                 // console.log('Number of workflow_run_input indexes:', workflowInput.length);
//                 // console.log('Number of workflow_run_output indexes:', workflowOutput.length);

//                 // Additional logic for updating textarea
//                 let workflowDataJSON = JSON.stringify(workflowData, null, 2);
//                 if (workflowDataJSON.length > contentWorkflow.value.length) {
//                     contentWorkflow.value = workflowDataJSON; // Update textarea
//                 } else if(workflowDataJSON.length === contentWorkflow.value.length && workflowOutput[lastOutputIndex]){
//                     console.log('They have the same length and limit reached');
//                 }

//                 console.log('workflowDataJSON Length: ' + workflowDataJSON.length);
//                 console.log('textarea length: ' + contentWorkflow.value.length);
//                 })


//             .catch(error => {
//                 console.error('Error during polling:', error);
//                 clearInterval(interval); // Stop polling on error
//             });
//     // }, 3000); // Poll every 3 seconds
// };

// Helper function to determine if polling is complete
// function isPollingComplete(workflowOutput) {
//     // Custom logic to determine if all indexes have been processed
//     // Example: Check if there's a specific "completed" property or status
//     return workflowOutput.every(output => output.status === 'completed');
// }
}   

document.body.appendChild(stepDiv);
document.body.appendChild(outline);

}

//         const apiKey = 'sk-7wCiJRnOFz5jkQxZCFuuMw20250312224040';
//         const workFlowId = '67d213cdfaf90882fbf642ee';

//         const url = `https://api-v3.mindpal.io/api/workflow/run?workflow_id=${workFlowId}&workflow_run_title=local%20run&openai_api_key=${apiKey}&anthropic_api_key=${apiKey}&groq_api_key=${apiKey}&google_api_key=${apiKey}`
//         const headers = {
//           'accept': 'application/json',
//           'x-api-key': apiKey,
//           'Content-Type': 'application/json'
//         };

//         const data = {
//           "Product Features": "can",
//           "Target Audience": "adults"
//         };

//         // Perform the POST request
//     axios.post(url, data, { headers })
//         .then(response => {
//             console.log('POST Response:', response.data);

//             // Extract the workflow_run_id from the POST response
//             const workflowRunId = response.data.workflow_run_id;
//             console.log('Workflow Run ID:', workflowRunId);

//             // Start polling the server for output
//             pollForWorkflowOutput(workflowRunId, headers);
//         })
//         .catch(error => console.error('Error:', error));
// });

});



//POST NEW WORKFLOW
async function createWorkflow(){
    const userId = id;

    const titleInput = document.getElementById('agent-title').value;
    const backgroundInput = document.getElementById('agent-background').value;

    try {
        const response = await axios.post(`/create-workflow/${userId}`,{
            title: titleInput,
            background: backgroundInput
        });

        console.log("Server response received:", response.data);
        alert("Agent created successfully!");
        window.location.href = '/home'
    } catch (error) {
        console.error(error.response.data.error);
        alert("An error occurred while creating new agent.");
    }

}

</script>